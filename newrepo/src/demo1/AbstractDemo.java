package demo1;
/**抽象类{
 *抽象：笼统，模糊，不具体。
 }
 抽象特点{
 1。方法只有声明没有实现是，该方法就是抽象方法，需要被abstract修饰
 抽象方法必须定义在抽象类中，该类必须被abstract修饰
 2。抽象类不可以被实例化，为什么？{
 因为调用抽象方法没意义
   }
 3。抽象类必须由其子类覆盖了所有的抽象方法后，该子类才能可以实例化，否则这个子类还是抽象类
 }

 抽象类中有构造函数吗？{
 有，用来给子类对象进行初始化
 }

 抽象类可以不定义抽象方法吗?{
  可以的，但是很少见，目的就是不让该类创建对象，AWT的适配器对象就是这种类
 通常这个类中的方法有方法体，但是却没有内容

 }
 抽象关键字不可以和那些关键字共存？{
  private：不行，抽象方法需要覆盖，private不能被覆盖
  static:不行，
  final:不行，
 }
 抽象类和一般类的区别?{
 相同点：抽象类和一般类都是用来描述事物的，都在内部定了成员
 不同点：1。一般类有足够的信息描述事物，抽象类描述事的信息有可能不足
 2。一般类中不能定义抽象方法，只能定义非定义方法，抽象类中可定义抽象方法，同时可以定义非抽象方法
 3。一般类可以被实例化，抽象类不可以被实例化

 }
 抽象类一定是个父类吗?{
   是的。因为需要子类覆盖其方法后才可以对子类实例化
 }
 * */


public class AbstractDemo {
    public static void main(String args[]){

    }


}
